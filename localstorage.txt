
localStorage Basics

Definition: localStorage is a Web Storage API that provides a way to store data in the browser that persists even after the browser is closed.

Storage Limit: Typically around 5-10 MB per domain.

Data Type: Stores data as key-value pairs. Values are stored as strings.

Core Methods
setItem(key, value): Stores a value under a specified key.
getItem(key): Retrieves the value associated with a specified key.
removeItem(key): Removes the key-value pair specified by the key.
clear(): Clears all key-value pairs in localStorage.
key(index): Returns the key at the specified index in localStorage.

Storing and Retrieving Data

Store Data:
localStorage.setItem('name', 'John Doe');

Retrieve Data:
const name = localStorage.getItem('name'); // 'John Doe'

Remove Data:
localStorage.removeItem('name');

Clear All Data:
localStorage.clear();
Handling Non-String Data
JSON Serialization: Convert non-string data to JSON before storing and parse JSON when retrieving.

Store Object:
const user = { name: 'John Doe', age: 30 };
localStorage.setItem('user', JSON.stringify(user));

Retrieve Object:
const user = JSON.parse(localStorage.getItem('user'));

Practical Example
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LocalStorage Example</title>
</head>
<body>
    <form id="userForm">
        <input type="text" id="name" placeholder="Enter your name">
        <button type="submit">Save</button>
    </form>
    <div id="display"></div>

    <script>
        document.getElementById('userForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const name = document.getElementById('name').value;
            localStorage.setItem('userName', name);
            displayUserName();
        });

        function displayUserName() {
            const storedName = localStorage.getItem('userName');
            if (storedName) {
                document.getElementById('display').textContent = `Hello, ${storedName}!`;
            }
        }

        // Display the name on page load if it exists
        document.addEventListener('DOMContentLoaded', displayUserName);
    </script>
</body>
</html>

Use Cases
Persisting User Preferences: Storing theme preferences, language settings, etc.

Saving Form Data: Retaining form inputs between page reloads.

Caching Data: Storing API responses for offline access or faster retrieval.

Security Considerations

Sensitive Data: Avoid storing sensitive information like passwords in localStorage as it is accessible by any script on the page.
Same-Origin Policy: localStorage is domain-specific; data stored by one domain cannot be accessed by another.









